// test parser module script
int GetTestFileCount()
{
  return 17;
}

void TestFile()
{
  tap.Comment("start File tests");
  
  // Test File.Open, File.Exists, File.Delete
  {
    String path = "$SAVEGAMEDIR$/exists_test.txt";
    
    File *existsTestFile = File.Open(path, eFileWrite);    
    tap.ok(existsTestFile != null, "File.Open opens a file for writing");
    
    existsTestFile.WriteString("test content");
    existsTestFile.Close();    
    tap.ok(File.Exists(path), "File.Exists detects existing file");
        
    File.Delete(path);
    tap.nok(File.Exists(path), "File.Delete removes the file");
  }

  // Test File.ReadInt and File.WriteInt functions
  {
    String path = "$SAVEGAMEDIR$/int_test.dat";
    
    File *intFile = File.Open(path, eFileWrite);
    intFile.WriteInt(42);
    intFile.Close();
    intFile = File.Open(path, eFileRead);
    
    tap.nok(intFile.EOF, "File.EOF is correctly false");
    tap.is_int(intFile.ReadInt(), 42, "File.ReadInt and File.WriteInt work correctly");
    tap.ok(intFile.EOF, "File.EOF is correctly true");
    
    intFile.Close();
    File.Delete(path);
    tap.nok(File.Exists(path), "File.Delete removes the file");
  }

  // Test File.ReadRawChar and File.WriteRawChar functions
  {
    String path = "$SAVEGAMEDIR$/raw_char_test.txt";
    
    File *rawCharFile = File.Open(path, eFileWrite);
    rawCharFile.WriteRawChar(65);  // ASCII value for 'A'
    rawCharFile.Close();
    rawCharFile = File.Open(path, eFileRead);
    
    tap.is_int(rawCharFile.ReadRawChar(), 65, "File.ReadRawChar and File.WriteRawChar work correctly");
    
    rawCharFile.Close();
    File.Delete(path);
    tap.nok(File.Exists(path), "File.Delete removes the file");
  }

  // Test File.ReadStringBack and File.WriteString functions
  {
    String path = "$SAVEGAMEDIR$/string_test.txt";
    
    File *stringFile = File.Open(path, eFileWrite);
    stringFile.WriteString("test string");
    stringFile.Close();
    stringFile = File.Open(path, eFileRead);
    
    tap.is(stringFile.ReadStringBack(), "test string", "File.ReadStringBack and File.WriteString work correctly");
    
    stringFile.Close();
    File.Delete(path);
    tap.nok(File.Exists(path), "File.Delete removes the file");
  }

  // Test File.Seek function
  {
    String path = "$SAVEGAMEDIR$/seek_test.txt";
    
    File *seekFile = File.Open(path, eFileWrite);
    
    seekFile.WriteRawLine("abcdefgh");
    seekFile.Seek(4, eSeekBegin);
    tap.is_char(seekFile.ReadRawChar(), 'e', "File.Seek works correctly (1)");
    
    seekFile.Close();    
    seekFile = File.Open(path, eFileRead);
    
    seekFile.Seek(2, eSeekCurrent);
    tap.is_char(seekFile.ReadRawChar(), 'c', "File.Seek works correctly (2)");
    seekFile.Seek(1, eSeekCurrent);
    tap.is_char(seekFile.ReadRawChar(), 'e', "File.Seek works correctly (3)");
    seekFile.Seek(-2, eSeekCurrent);
    tap.is_char(seekFile.ReadRawChar(), 'd', "File.Seek works correctly (4)");
    seekFile.Seek(-3, eSeekEnd); // WriteRawLine uses cr lf
    tap.is_char(seekFile.ReadRawChar(), 'h', "File.Seek works correctly (5)");
    
    seekFile.Close();
    File.Delete(path);
    tap.nok(File.Exists(path), "File.Delete removes the file");
  }

  // TO-DO: figure how to test File.ResolvePath function and File.Path attribute
  
  tap.Comment("end File tests");
}