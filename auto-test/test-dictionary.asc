// test dictionary module script
int GetTestDictionaryCount()
{
  return 16;
}

void TestDictionary()
{  
  tap.Comment("start Dictionary tests");
  
  // Create a dictionary, add items, and check if Contains works
  {
    Dictionary* myDictionary = Dictionary.Create();
    myDictionary.Set("my-key1", "my-value1");

    tap.ok(myDictionary.Contains("my-key1"), "Contains should return true for added key");
    tap.ok(!myDictionary.Contains("non-existent-key"), "Contains should return false for non-existent key");
  }

  // Get and Set values in dictionary
  {
    Dictionary* myDictionary = Dictionary.Create();
    myDictionary.Set("a-key", "a-value");

    tap.is(myDictionary.Get("a-key"), "a-value", "Get should return the correct value");
    tap.is(myDictionary.Get("non-existent-key"), null, "Get should return null for non-existent key");

    myDictionary.Set("a-key", "new-value");
    tap.is(myDictionary.Get("a-key"), "new-value", "Set should update the value for an existing key");
  }

  // Remove key and check if it exists
  {
    Dictionary* myDictionary = Dictionary.Create();
    myDictionary.Set("key-to-remove", "value");

    tap.ok(myDictionary.Contains("key-to-remove"), "Contains should return true before removal");

    myDictionary.Remove("key-to-remove");
    tap.ok(!myDictionary.Contains("key-to-remove"), "Contains should return false after removal");
  }

  // GetKeysAsArray and GetValuesAsArray
  {
    Dictionary* myDictionary = Dictionary.Create(eSorted, eCaseSensitive);
    myDictionary.Set("key1", "value1");
    myDictionary.Set("key2", "value2");

    String keys[] = myDictionary.GetKeysAsArray();
    String values[] = myDictionary.GetValuesAsArray();

    tap.is(keys[0], "key1", "GetKeysAsArray should return keys in the correct order");
    tap.is(values[1], "value2", "GetValuesAsArray should return values in the correct order");
  }

  // Clear the dictionary
  {
    Dictionary* myDictionary = Dictionary.Create();
    myDictionary.Set("key1", "value1");
    myDictionary.Set("key2", "value2");

    myDictionary.Clear();
    tap.ok(myDictionary.ItemCount == 0, "Clear should remove all items from the dictionary");
  }

  // CompareStyle and SortStyle
  {
    Dictionary* caseSensitiveDict = Dictionary.Create(eSorted, eCaseSensitive);
    caseSensitiveDict.Set("Key1", "value1");
    caseSensitiveDict.Set("key2", "value2");
    
    tap.ok(caseSensitiveDict.Contains("Key1"),  "Contains should be case-sensitive (ok 1)");
    tap.ok(caseSensitiveDict.Contains("key2"),  "Contains should be case-sensitive (ok 2)");
    tap.nok(caseSensitiveDict.Contains("kEy1"), "Contains should be case-sensitive (nok 1)");
    tap.nok(caseSensitiveDict.Contains("KeY2"), "Contains should be case-sensitive (nok 2)");

    Dictionary* caseInsensitiveDict = Dictionary.Create(eSorted, eCaseInsensitive);
    caseInsensitiveDict.Set("Key1", "value1");
    caseInsensitiveDict.Set("key2", "value2");

    tap.ok(caseInsensitiveDict.Contains("KeY1"), "Contains should be case-insensitive (1)");
    tap.ok(caseInsensitiveDict.Contains("kEy2"), "Contains should be case-insensitive (2)");
  }

  tap.Comment("end Dictionary tests");
}
