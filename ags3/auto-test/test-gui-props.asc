// Test GUI Properties Module Script
//
// This module tests that all GUI and GUI control properties
// are properly set and read.
//
int GetTestGUIPropertiesCount()
{
  return 170;
}

#define NORMAL_GUI_ID 1
#define NORMAL_GUI_SCRIPTNAME "gGui2"
#define NORMAL_GUI_CONTROL_COUNT 6

#define BUTTON_ID 0
#define BUTTON_SCRIPT_NAME "Button2"
#define INVWINDOW_ID 5
#define INVWINDOW_SCRIPT_NAME "InventoryWindow1"
#define LABEL_ID 1
#define LABEL_SCRIPT_NAME "Label1"
#define LISTBOX_ID 3
#define LISTBOX_SCRIPT_NAME "ListBox1"
#define SLIDER_ID 4
#define SLIDER_SCRIPT_NAME "Slider1"
#define TEXTBOX_ID 2
#define TEXTBOX_SCRIPT_NAME "TextBox1"

void TestGUIProperties()
{
  tap.Comment("start GUI Properties tests");
  
  {
    tap.Comment("Normal GUI Properties");
    
    GUI *g  = gGui2;
    tap.is_int(g.AsTextWindow == null, true, "GUI.TextWindow get (normal)");
    g.BackgroundColor = 10;
    tap.is_int(g.BackgroundColor, 10, "GUI.BackgroundColor");
    g.BackgroundGraphic = 5;
    tap.is_int(g.BackgroundGraphic, 5, "GUI.BackgroundGraphic");
    g.BorderColor = 112233;
    tap.is_int(g.BorderColor, 112233, "GUI.BorderColor");
    g.Clickable = false;
    tap.is_int(g.Clickable, false, "GUI.Clickable (false)");
    g.Clickable = true;
    tap.is_int(g.Clickable, true, "GUI.Clickable (true)");
    tap.is_int(g.ControlCount, NORMAL_GUI_CONTROL_COUNT, "GUI.ControlCount");
    g.Height = 100;
    tap.is_int(g.Height, 100, "GUI.Height");
    tap.is_int(g.ID, NORMAL_GUI_ID, "GUI.ID");
    //g.PopupStyle = eGUIPopupMouseYPos;
    //tap.is_int(g.PopupStyle, eGUIPopupMouseYPos, "GUI.PopupStyle");
    tap.is_int(g.PopupStyle, eGUIPopupNormal, "GUI.PopupStyle");
    g.PopupYPos = 22;
    tap.is_int(g.PopupYPos, 22, "GUI.PopupYPos");
    tap.is(g.ScriptName, NORMAL_GUI_SCRIPTNAME, "GUI.ScriptName");
    // TODO: cannot test dynamic PopupStyle change, because it's not settable
    /*
    g.PopupStyle = eGUIPopupNormal;
    g.Visible = true;
    tap.is_int(g.Shown, true, "GUI.Shown (1)");
    g.Visible = false;
    tap.is_int(g.Shown, false, "GUI.Shown (2)");
    g.PopupStyle = eGUIPopupMouseYPos;
    g.Visible = true;
    tap.is_int(g.Shown, false, "GUI.Shown (3)");
    */
    g.Visible = true;
    tap.is_int(g.Shown, true, "GUI.Shown (false)");
    g.Visible = false;
    tap.is_int(g.Shown, false, "GUI.Shown (true)");
    // TODO: test that legacy transparency range is inaccurate
    g.Transparency = 70;
    tap.is_int(g.Transparency, 70, "GUI.Transparency");
    g.Visible = false;
    tap.is_int(g.Visible, false, "GUI.Visible (false)");
    g.Visible = true;
    tap.is_int(g.Visible, true, "GUI.Visible (true)");
    g.Width = 220;
    tap.is_int(g.Width, 220, "GUI.Width");
    g.X = 60;
    tap.is_int(g.X, 60, "GUI.X");
    g.Y = 40;
    tap.is_int(g.Y, 40, "GUI.Y");
    g.ZOrder = -15;
    tap.is_int(g.ZOrder, -15, "GUI.ZOrder");
    
    
    tap.Comment("TextWindow GUI Properties");
    
    GUI *gtw = gTextWindow1;
    TextWindowGUI *tw = gtw.AsTextWindow;
    tap.is_int(gtw.AsTextWindow != null, true, "GUI.TextWindow get (textwindow)");
    tw.TextColor = 12;
    tap.is_int(tw.TextColor, 12, "GUI.TextColor");
    tw.TextPadding = 4;
    tap.is_int(tw.TextPadding, 4, "GUI.TextPadding");
  }
  
  {
    tap.Comment("Button Properties");
    
    Button* btn = Button2;
    
    tap.is_int(btn.Animating, false, "Button.Animating (false)");
    btn.Animate(VWALKING2, 1, 0, eOnce, eNoBlock, eForwards, 4);
    tap.is_int(btn.Animating, true, "Button.Animating (true)");
    tap.is_int(btn.View, VWALKING2, "Button.View");
    tap.is_int(btn.Loop, 1, "Button.Loop");
    tap.is_int(btn.Frame, 4, "Button.Frame");
    tap.is_int(btn.Graphic, 0, "Button.Graphic (0)");
    btn.Clickable = false;
    tap.is_int(btn.Clickable, false, "Button.Clickable (false)");
    btn.Clickable = true;
    tap.is_int(btn.Clickable, true, "Button.Clickable (true)");
    btn.ClipImage = false;
    tap.is_int(btn.ClipImage, false, "Button.ClipImage (false)");
    btn.ClipImage = true;
    tap.is_int(btn.ClipImage, true, "Button.ClipImage (true)");
    btn.Enabled = false;
    tap.is_int(btn.Enabled, false, "Button.Enabled (false)");
    btn.Enabled = true;
    tap.is_int(btn.Enabled, true, "Button.Enabled (true)");
    btn.Font = eFontFont1;
    tap.is_int(btn.Font, eFontFont1, "Button.Font");
    btn.Height = 25;
    tap.is_int(btn.Height, 25, "Button.Height");
    tap.is_int(btn.ID, BUTTON_ID, "Button.ID");
    btn.MouseOverGraphic = 1;
    tap.is_int(btn.MouseOverGraphic, 1, "Button.MouseOverGraphic");
    btn.NormalGraphic = 2;
    tap.is_int(btn.NormalGraphic, 2, "Button.NormalGraphic");
    tap.is_int(btn.Graphic, 2, "Button.Graphic (2)");
    tap.is_int(btn.OwningGUI == gGui2, true, "Button.OwningGUI");
    btn.PushedGraphic = 3;
    tap.is_int(btn.PushedGraphic, 3, "Button.PushedGraphic");
    tap.is(btn.ScriptName, BUTTON_SCRIPT_NAME, "Button.ScriptName");
    btn.Text = "This is a text";
    tap.is(btn.Text, "This is a text", "Button.Text");
    btn.TextAlignment = eAlignTopRight;
    tap.is_int(btn.TextAlignment, eAlignTopRight, "Button.TextAlignment");
    btn.TextColor = 65535;
    tap.is_int(btn.TextColor, 65535, "Button.TextColor");
    btn.Transparency = 40;
    tap.is_int(btn.Transparency, 40, "Button.Transparency");
    btn.Visible = false;
    tap.is_int(btn.Visible, false, "Button.Visible (false)");
    btn.Visible = true;
    tap.is_int(btn.Visible, true, "Button.Visible (true)");
    btn.Width = 80;
    tap.is_int(btn.Width, 80, "Button.Width");
    btn.X = 15;
    tap.is_int(btn.X, 15, "Button.X");
    btn.Y = 24;
    tap.is_int(btn.Y, 24, "Button.Y");
    btn.ZOrder = 4;
    tap.is_int(btn.ZOrder, 4, "Button.ZOrder");
  }
  
  {
    tap.Comment("InventoryWindow Properties");
    
    InvWindow* inv = InventoryWindow1;
    
    inv.CharacterToUse = cInventoryHolder;
    tap.is_int(inv.CharacterToUse == cInventoryHolder, true, "InvWindow.CharacterToUse");
    inv.Clickable = false;
    tap.is_int(inv.Clickable, false, "InvWindow.Clickable (false)");
    inv.Clickable = true;
    tap.is_int(inv.Clickable, true, "InvWindow.Clickable (true)");
    inv.Enabled = false;
    tap.is_int(inv.Enabled, false, "InvWindow.Enabled (false)");
    inv.Enabled = true;
    tap.is_int(inv.Enabled, true, "InvWindow.Enabled (true)");
    inv.Height = 25;
    tap.is_int(inv.Height, 25, "InvWindow.Height");
    tap.is_int(inv.ID, INVWINDOW_ID, "InvWindow.ID");    
    tap.is_int(inv.OwningGUI == gGui2, true, "InvWindow.OwningGUI");
    tap.is(inv.ScriptName, INVWINDOW_SCRIPT_NAME, "InvWindow.ScriptName");
    inv.Transparency = 40;
    tap.is_int(inv.Transparency, 40, "InvWindow.Transparency");
    inv.Visible = false;
    tap.is_int(inv.Visible, false, "InvWindow.Visible (false)");
    inv.Visible = true;
    tap.is_int(inv.Visible, true, "InvWindow.Visible (true)");
    inv.Width = 80;
    tap.is_int(inv.Width, 80, "InvWindow.Width");
    inv.X = 15;
    tap.is_int(inv.X, 15, "InvWindow.X");
    inv.Y = 24;
    tap.is_int(inv.Y, 24, "InvWindow.Y");
    inv.ZOrder = 4;
    tap.is_int(inv.ZOrder, 4, "InvWindow.ZOrder");
    
    cInventoryHolder.AddInventory(iInvItemOne);
    cInventoryHolder.AddInventory(iInvItemTwo);
    cInventoryHolder.AddInventory(iInvItemThree);
    tap.is_int(inv.ItemAtIndex[0] == iInvItemOne, true, "InvWindow.ItemAtIndex (0)");
    tap.is_int(inv.ItemAtIndex[1] == iInvItemTwo, true, "InvWindow.ItemAtIndex (1)");
    tap.is_int(inv.ItemAtIndex[2] == iInvItemThree, true, "InvWindow.ItemAtIndex (2)");
    tap.is_int(inv.ItemCount, 3, "InvWindow.ItemCount");
    inv.ItemHeight = 5;
    tap.is_int(inv.ItemHeight, 5, "InvWindow.ItemHeight");
    inv.ItemWidth = 20;
    tap.is_int(inv.ItemWidth, 20, "InvWindow.ItemWidth");
    tap.is_int(inv.ItemsPerRow, 4, "InvWindow.ItemsPerRow");
    tap.is_int(inv.RowCount, 5, "InvWindow.RowCount");
    inv.TopItem = 1;
    tap.is_int(inv.TopItem, 1, "InvWindow.TopItem");
  }
  
  {
    tap.Comment("Label Properties");
    
    Label* lbl = Label1;
    
    lbl.Clickable = false;
    tap.is_int(lbl.Clickable, false, "Label.Clickable (false)");
    lbl.Clickable = true;
    tap.is_int(lbl.Clickable, true, "Label.Clickable (true)");
    lbl.Enabled = false;
    tap.is_int(lbl.Enabled, false, "Label.Enabled (false)");
    lbl.Enabled = true;
    tap.is_int(lbl.Enabled, true, "Label.Enabled (true)");
    lbl.Font = eFontFont1;
    tap.is_int(lbl.Font, eFontFont1, "Label.Font");
    lbl.Height = 25;
    tap.is_int(lbl.Height, 25, "Label.Height");
    tap.is_int(lbl.ID, LABEL_ID, "Label.ID");
    tap.is_int(lbl.OwningGUI == gGui2, true, "Label.OwningGUI");
    tap.is(lbl.ScriptName, LABEL_SCRIPT_NAME, "Label.ScriptName");
    lbl.Text = "This is a text";
    tap.is(lbl.Text, "This is a text", "Label.Text");
    lbl.TextAlignment = eAlignTopRight;
    tap.is_int(lbl.TextAlignment, eAlignTopRight, "Label.TextAlignment");
    lbl.TextColor = 65535;
    tap.is_int(lbl.TextColor, 65535, "Label.TextColor");
    lbl.Transparency = 40;
    tap.is_int(lbl.Transparency, 40, "Label.Transparency");
    lbl.Visible = false;
    tap.is_int(lbl.Visible, false, "Label.Visible (false)");
    lbl.Visible = true;
    tap.is_int(lbl.Visible, true, "Label.Visible (true)");
    lbl.Width = 80;
    tap.is_int(lbl.Width, 80, "Label.Width");
    lbl.X = 15;
    tap.is_int(lbl.X, 15, "Label.X");
    lbl.Y = 24;
    tap.is_int(lbl.Y, 24, "Label.Y");
    lbl.ZOrder = 4;
    tap.is_int(lbl.ZOrder, 4, "Label.ZOrder");
  }
  
  {
    tap.Comment("ListBox Properties");
    
    ListBox* box = ListBox1;
    
    box.Clickable = false;
    tap.is_int(box.Clickable, false, "ListBox.Clickable (false)");
    box.Clickable = true;
    tap.is_int(box.Clickable, true, "ListBox.Clickable (true)");
    box.Enabled = false;
    tap.is_int(box.Enabled, false, "ListBox.Enabled (false)");
    box.Enabled = true;
    tap.is_int(box.Enabled, true, "ListBox.Enabled (true)");
    box.Font = eFontFont1;
    tap.is_int(box.Font, eFontFont1, "ListBox.Font");
    box.Height = 25;
    tap.is_int(box.Height, 25, "ListBox.Height");
    tap.is_int(box.ID, LISTBOX_ID, "ListBox.ID");
    tap.is_int(box.OwningGUI == gGui2, true, "ListBox.OwningGUI");
    tap.is(box.ScriptName, LISTBOX_SCRIPT_NAME, "ListBox.ScriptName");
    box.TextAlignment = eAlignTopRight;
    tap.is_int(box.TextAlignment, eAlignTopRight, "ListBox.TextAlignment");
    box.TextColor = 65535;
    tap.is_int(box.TextColor, 65535, "ListBox.TextColor");
    box.Transparency = 40;
    tap.is_int(box.Transparency, 40, "ListBox.Transparency");
    box.Visible = false;
    tap.is_int(box.Visible, false, "ListBox.Visible (false)");
    box.Visible = true;
    tap.is_int(box.Visible, true, "ListBox.Visible (true)");
    box.Width = 80;
    tap.is_int(box.Width, 80, "ListBox.Width");
    box.X = 15;
    tap.is_int(box.X, 15, "ListBox.X");
    box.Y = 24;
    tap.is_int(box.Y, 24, "ListBox.Y");
    box.ZOrder = 4;
    tap.is_int(box.ZOrder, 4, "ListBox.ZOrder");
    
    box.AddItem("item1");
    box.AddItem("item2");
    box.AddItem("item3");
    tap.is_int(box.ItemCount, 3, "ListBox.ItemCount");
    tap.is(box.Items[0], "item1", "ListBox.Items (0)");
    tap.is(box.Items[1], "item2", "ListBox.Items (1)");
    tap.is(box.Items[2], "item3", "ListBox.Items (2)");
    // NOTE: this is calculated from font height and listbox.Height
    tap.is_int(box.RowCount, 2, "ListBox.RowCount");
    // TODO: find a way to test SaveGameSlots
    //box.SaveGameSlots
    box.SelectedBackColor = 32767;
    tap.is_int(box.SelectedBackColor, 32767, "ListBox.SelectedBackColor");
    box.SelectedIndex = 2;
    tap.is_int(box.SelectedIndex, 2, "ListBox.SelectedIndex");
    box.SelectedTextColor = 16;
    tap.is_int(box.SelectedTextColor, 16, "ListBox.SelectedTextColor");
    box.ShowBorder = false;
    tap.is_int(box.ShowBorder, false, "ListBox.ShowBorder (false)");
    box.ShowBorder = true;
    tap.is_int(box.ShowBorder, true, "ListBox.ShowBorder (true)");
    box.ShowScrollArrows = false;
    tap.is_int(box.ShowScrollArrows, false, "ListBox.ShowScrollArrows (false)");
    box.ShowScrollArrows = true;
    tap.is_int(box.ShowScrollArrows, true, "ListBox.ShowScrollArrows (true)");
    box.TopItem = 1;
    tap.is_int(box.TopItem, 1, "ListBox.TopItem");
  }
  
  {
    tap.Comment("Slider Properties");
    
    Slider* sl = Slider1;
    
    sl.Clickable = false;
    tap.is_int(sl.Clickable, false, "Slider.Clickable (false)");
    sl.Clickable = true;
    tap.is_int(sl.Clickable, true, "Slider.Clickable (true)");
    sl.Enabled = false;
    tap.is_int(sl.Enabled, false, "Slider.Enabled (false)");
    sl.Enabled = true;
    tap.is_int(sl.Enabled, true, "Slider.Enabled (true)");
    sl.Height = 25;
    tap.is_int(sl.Height, 25, "Slider.Height");
    tap.is_int(sl.ID, SLIDER_ID, "Slider.ID");
    tap.is_int(sl.OwningGUI == gGui2, true, "Slider.OwningGUI");
    tap.is(sl.ScriptName, SLIDER_SCRIPT_NAME, "Slider.ScriptName");
    sl.Transparency = 40;
    tap.is_int(sl.Transparency, 40, "Slider.Transparency");
    sl.Visible = false;
    tap.is_int(sl.Visible, false, "Slider.Visible (false)");
    sl.Visible = true;
    tap.is_int(sl.Visible, true, "Slider.Visible (true)");
    sl.Width = 80;
    tap.is_int(sl.Width, 80, "Slider.Width");
    sl.X = 15;
    tap.is_int(sl.X, 15, "Slider.X");
    sl.Y = 24;
    tap.is_int(sl.Y, 24, "Slider.Y");
    sl.ZOrder = 4;
    tap.is_int(sl.ZOrder, 4, "Slider.ZOrder");
    
    sl.BackgroundGraphic = 5;
    tap.is_int(sl.BackgroundGraphic, 5, "Slider.BackgroundGraphic");
    sl.HandleGraphic = 6;
    tap.is_int(sl.HandleGraphic, 6, "Slider.HandleGraphic");
    sl.HandleOffset = 2;
    tap.is_int(sl.HandleOffset, 2, "Slider.HandleOffset");
    sl.Max = 100;
    tap.is_int(sl.Max, 100, "Slider.Max");
    sl.Min = -20;
    tap.is_int(sl.Min, -20, "Slider.Min");
    sl.Value = 44;
    tap.is_int(sl.Value, 44, "Slider.Value");
  }
  
  {
    tap.Comment("TextBox Properties");
    
    TextBox* tb = TextBox1;
    
    tb.Clickable = false;
    tap.is_int(tb.Clickable, false, "TextBox.Clickable (false)");
    tb.Clickable = true;
    tap.is_int(tb.Clickable, true, "TextBox.Clickable (true)");
    tb.Enabled = false;
    tap.is_int(tb.Enabled, false, "TextBox.Enabled (false)");
    tb.Enabled = true;
    tap.is_int(tb.Enabled, true, "TextBox.Enabled (true)");
    tb.Font = eFontFont1;
    tap.is_int(tb.Font, eFontFont1, "TextBox.Font");
    tb.Height = 25;
    tap.is_int(tb.Height, 25, "TextBox.Height");
    tap.is_int(tb.ID, TEXTBOX_ID, "TextBox.ID");
    tap.is_int(tb.OwningGUI == gGui2, true, "TextBox.OwningGUI");
    tap.is(tb.ScriptName, TEXTBOX_SCRIPT_NAME, "TextBox.ScriptName");
    tb.TextColor = 65535;
    tap.is_int(tb.TextColor, 65535, "TextBox.TextColor");
    tb.Transparency = 40;
    tap.is_int(tb.Transparency, 40, "TextBox.Transparency");
    tb.Visible = false;
    tap.is_int(tb.Visible, false, "TextBox.Visible (false)");
    tb.Visible = true;
    tap.is_int(tb.Visible, true, "TextBox.Visible (true)");
    tb.Width = 80;
    tap.is_int(tb.Width, 80, "TextBox.Width");
    tb.X = 15;
    tap.is_int(tb.X, 15, "TextBox.X");
    tb.Y = 24;
    tap.is_int(tb.Y, 24, "TextBox.Y");
    tb.ZOrder = 4;
    tap.is_int(tb.ZOrder, 4, "TextBox.ZOrder");
    
    tb.ShowBorder = false;
    tap.is_int(tb.ShowBorder, false, "TextBox.ShowBorder (false)");
    tb.ShowBorder = true;
    tap.is_int(tb.ShowBorder, true, "TextBox.ShowBorder (true)");
  }
  
  // CLEANUP
  gGui2.Visible = false;
  Button2.NormalGraphic = 0;
  
  tap.Comment("end GUI Properties tests");
}