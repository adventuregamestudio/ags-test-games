// Test Anything Protocol - Producer Module
// Script File
// If you are offline, at the end of this file there's a version of the readme of this module, in case it helps.

#define MAX_FAILED_TESTS 400
int _failed_tests[MAX_FAILED_TESTS];
String _test_filename;
int _test_count;
int _planned_tests;
int _fail_count;
int _pass_count;
bool _any_test_failed = false;

void _clear_failed_tests(){
  _fail_count =0;
  for(int i=0; i<MAX_FAILED_TESTS; i++){
    _failed_tests[i]=-1;
  }
}

void _note_failed_test(int t_index){
  _failed_tests[_fail_count] = t_index;
  _fail_count++;
}

String _get_failed_tests(){
  String str = "";
  for(int i=0; i<_fail_count; i++){
    if(i>0) str = str.Append(", ");
    str = str.Append(String.Format("%d", _failed_tests[i]));
  }
  return str;
}

void _set_test_filename(String filename)
{
  _test_filename = "$SAVEGAMEDIR$/";
  _test_filename = _test_filename.Append(filename);
}

void _check_test_filename(){
  if(_test_filename == null) {
    _set_test_filename(DEFAULT_TEST_FILENAME);
  }  
}

void _write_line(File* file, bool error, String str)
{
  file.WriteRawLine(str);
  if(error) System.Log(eLogError, "%s", str);
  else System.Log(eLogInfo, "%s", str);  
}

void _impl_test_printer(String str, bool error){
  _check_test_filename();
  
  File* file = null;
  if(!File.Exists(_test_filename)){
    file = File.Open(_test_filename, eFileWrite);
    _write_line(file, false, String.Format("TAP version %d", TAP_SPEC_VERSION));
  } else {
    file = File.Open(_test_filename, eFileAppend);
  }
  
  _write_line(file, error, str);
  file.Close();
}

void _test_printer(String str) {
  _impl_test_printer(str, false);
}

void _test_printer_error(String str) {
  _impl_test_printer(str, true);
}

void _ok(bool condition, String test_name){
  if(condition) {
    if(test_name!=null && test_name.Length > 0) {
      _test_printer(String.Format("ok %d - %s", _test_count, test_name));
    } else {
      _test_printer(String.Format("ok %d", _test_count));      
    }
    _pass_count++;
  } else {
    _any_test_failed = true;
    if(test_name!=null && test_name.Length > 0) {
      _test_printer_error(String.Format("not ok %d - %s", _test_count, test_name));
      _test_printer_error(String.Format("# Failed test '%s'", test_name));
    } else {
      _test_printer_error(String.Format("not ok %d", _test_count));
      _test_printer_error(String.Format("# Failed test %d", _test_count));      
    }
    _note_failed_test(_test_count);
  }
  _test_count++;
}

void _clean_test(){
  _planned_tests = 0;
  _test_count = 1;
  _pass_count = 0;
  _clear_failed_tests();  
}
// -- PUBLIC METHODS --

static void tap::clean_test(){
  _clean_test();
  _check_test_filename();
  
  File* file = null;
  
  if(File.Exists(_test_filename)){
    File.Delete(_test_filename);
  }  
}

static void tap::plan(int n,  String skip_reason){
  _clean_test();
  _planned_tests = n;
  if(n == NO_PLAN) return;
  if(n == SKIP_ALL) {
    // need to ignore everything until next done_testing  
    if(skip_reason != null && skip_reason.Length > 0){
      _test_printer(String.Format("SKIP %s\n", skip_reason));
    }
    return;
  } 
  _test_printer(String.Format("1..%d", n));
}

static void tap::ok(bool condition, String test_name){
  _ok(condition, test_name);
}

static void tap::nok(bool condition, String test_name){
  _ok(!condition, test_name);
}

static void tap::is(String got,  String expected, String test_name){
  bool test = true;
  if(got != null && expected != null) test = got == expected;
  
  _ok(test, test_name);
  if(!test){
    _test_printer_error(String.Format("# got: %s", got));
    _test_printer_error(String.Format("# expected: %s", expected));
  }
}

static void tap::isnt(String got,  String expected, String test_name){
  bool test = got != expected;
  
  _ok(test, test_name);
  if(!test){
    _test_printer_error(String.Format("# got: %s", got));
    _test_printer_error(String.Format("# expected different than: %s", expected));
  }
}

static void tap::is_int(int got,  int expected, String test_name){
  bool test = got == expected;
  
  _ok(test, test_name);
  if(!test){
    _test_printer_error(String.Format("# got: %d", got));
    _test_printer_error(String.Format("# expected: %d", expected));
  }
}

static void tap::is_char(int got,  int expected, String test_name){
  bool test = got == expected;
  
  _ok(test, test_name);
  if(!test){
    _test_printer_error(String.Format("# got: %c", got));
    _test_printer_error(String.Format("# expected: %c", expected));
  }
}

static void tap::isnt_int(int got,  int expected, String test_name){
  bool test = got != expected;
  
  _ok(test, test_name);
  if(!test){
    _test_printer_error(String.Format("# got: %d", got));
    _test_printer_error(String.Format("# expected different than: %d", expected));
  }
}

static void tap::is_float(float got,  float expected, float epsilon, String test_name){
  bool test = (got + epsilon >= expected) && (got - epsilon <= expected);
  
  _ok(test, test_name);
  if(!test){
    _test_printer_error(String.Format("# got: %f", got));
    _test_printer_error(String.Format("# expected: %f", expected));
    _test_printer_error(String.Format("# epsilon: %f", epsilon));
  }
}

static void tap::isnt_float(float got,  float expected, float epsilon, String test_name){
  bool test = (got + epsilon < expected) && (got - epsilon > expected);
  
  _ok(test, test_name);
  if(!test){
    _test_printer_error(String.Format("# got: %f", got));
    _test_printer_error(String.Format("# expected different than: %f", expected));
    _test_printer_error(String.Format("# epsilon: %f", epsilon));
  }
}

static void tap::done_testing(){
  if(_planned_tests==NO_PLAN) {
    _test_printer(String.Format("1..%d",_test_count-1));
    _planned_tests = 0;
  }
  _test_printer(String.Format("# failed tests: %d", _fail_count));
  _test_printer(String.Format("# passed tests: %d", _pass_count));
  _test_printer(String.Format("# total tests: %d", _test_count-1));
  _test_printer(String.Format("# planned tests: %d", _planned_tests));  
}

static void tap::Harness(){
  if(_fail_count > 0) {
    _test_printer(String.Format("FAILED tests %s", _get_failed_tests()));
    _test_printer(String.Format("Failed %d/%d tests", _fail_count, _test_count-1));
  }
}

static bool tap::AnyTestFailed(){
  return _any_test_failed;
}

static void tap::SetTestFilename(String filename) {
  _set_test_filename(filename);
}

static void tap::Comment(String comment) {
  _test_printer(String.Format("# %s", comment));
}

int get_PlannedTests(static tap)
{
  return _planned_tests;
}

int get_ExecutedTests(static tap)
{
  return _test_count - 1;
}

// refer to the game forum topic or github repository for updated current documentation.
// the below text is only provided as a last resort in case you are offline.
//
//
// ## Test Anything Protocol - AGS Module
// 
// The Module implements Test Anything Protocol for Adventure Game Studio. You
// can read more on it here: [testanything.org](https://testanything.org/)
// 
// An example test file output by this libary may look like:
//    
//     1..4
//     ok 1 - Input file opened
//     not ok 2 - First line of the input valid
//     ok 3 - Read the rest of the file
//     not ok 4 - Summarized correctly # TODO Not written yet
// 
// ### The plan
// The plan tells how many tests will be run, or how many tests have run. 
// Its a check that the test file hasn't stopped prematurely. It must appear 
// once, whether at the beginning or end of the output. The plan is usually the 
// first line of TAP output (although in future there may be a version line 
// before it) and it specifies how many test points are to follow. 
// For example, 
// 
//     1..10
// 
// means you plan on running 10 tests. This is a safeguard in case your test 
// file dies silently in the middle of its run. The plan is optional but if 
// there is a plan before the test points it must be the first non-diagnostic 
// line output by the test file. In certain instances a test file may not know 
// how many test points it will ultimately be running. In this case the plan can 
// be the last non-diagnostic line in the output. The plan cannot appear in the 
// middle of the output, nor can it appear more than once.
// 
// ### The test line
// The core of TAP is the test line. A test file prints one test line per test 
// point executed. There must be at least one test line in TAP output. Each test 
// line comprises the following elements:
// 
//     ok or not ok
// 
// This tells whether the test point passed or failed. It must be at the 
// beginning of the line. /^not ok/ indicates a failed test point. /^ok/ is a 
// successful test point. This is the only mandatory part of the line. Note that
// unlike the Directives below, ok and not ok are case-sensitive.
// 
// ### Test number
// TAP expects the ok or not ok to be followed by a test point number. 
// 
// ### Description
// Any text after the test number but before a # is the description of the test 
// point.
// 
//     ok 42 this is the description of the test
// 
// ### Directive
// The test point may include a directive, after a hash on the test line. 
// There are currently two directives allowed: TODO and SKIP. Hashes at the 
// beginning of a line are considered comments.
// 
// ## Executing tap with AGS
// 
// Before running any test, remove any leftover files and from a previous run, by
// running a clean test.
// 
//     tap.clean_test()
// 
// By default, test is printed to a file named `agstest.log` on the saved games
// directory for the game under test.
// 
// If you have a plan, state it before starting out.
// 
//     tap.plan(3);
// 
// Then run the needed tests.
// 
//     String null_string;
//     tap.ok(String.IsNullOrEmpty(null_string), "String.IsNullOrEmpty test null string");
//     tap.ok(String.IsNullOrEmpty(""), "String.IsNullOrEmpty test empty string");
//     tap.ok(!String.IsNullOrEmpty("with text"), "String.IsNullOrEmpty test non-empty string");
// 
// After you are done testing, state it.
// 
//     tap.done_testing();
// 
// ## TAP AGS Script API
// 
// ### tap.clean_test
//     void tap.clean_test()
// 
// This command removes previously outputed test log files if they exist. 
// 
// ### tap.plan
//     void tap.plan(int n,  String skip_reason = 0)
// 
// This allows setting a plan, so we know how many tests will be run. Just use it
// once for the group of tests following. If you want to start a new test, after
// a plan has been set, remember to call `tap.done_testing()` before.
// 
// Alternatively, you can pass `NO_PLAN` if you have no plan.
// 
// If the following tests are to be skipped, pass `SKIP_ALL`, so all tests until
// next plan are skipped. They will still be executed, they just won't output log 
// or be considered whether they fail or succeed.
// 
// ### tap.ok
//     void tap.ok(bool condition, String test_name = 0)
// 
// This test will succeed if the condition is true, and fail if the condition is 
// false.
// 
// ### tap.nok
//     void tap.nok(bool condition, String test_name = 0)
// 
// This test will succeed if the condition is false, and fail if the condition is 
// true.
// 
// ### tap.is
//     void tap.is(String got,  String expected, String test_name = 0)
// 
// This test will succeed if `got` and `expected` matches. If this test fails,
// we can have some more diagnostic information since we know both inputs and the
// premise they are supposed to match.
// 
// ### tap.isnt
//     void tap.isnt(String got,  String expected, String test_name = 0)
// 
// This test will succeed if `got` and `expected` does not matches. If this test 
// fails, we can have some more diagnostic information since we know both inputs 
// and the premise they are not supposed to match.
// 
// ### tap.is_int
//     void tap.is_int(int got,  int expected, String test_name = 0)
// 
// This test will succeed if `got` and `expected` matches. If this test fails,
// we can have some more diagnostic information since we know both inputs and the
// premise they are supposed to match. This is for `int` values.
// 
// ### tap.isnt_int
//     void tap.isnt_int(int got,  int expected, String test_name = 0)
// 
// This test will succeed if `got` and `expected` does not matches. If this test 
// fails, we can have some more diagnostic information since we know both inputs 
// and the premise they are not supposed to match. This is for `int` values.
// 
// ### tap.is_float
    // void tap.is_float(float got,  float expected, float epsilon, String test_name = 0)
// 
// This test will succeed if `got` and `expected` matches. If this test fails,
// we can have some more diagnostic information since we know both inputs and the
// premise they are supposed to match. This is for `float` values.
// 
// ### tap.isnt_float
    // void tap.isnt_float(float got,  float expected, float epsilon, String test_name = 0)
// 
// This test will succeed if `got` and `expected` does not matches. If this test 
// fails, we can have some more diagnostic information since we know both inputs 
// and the premise they are not supposed to match. This is for `float` values.
// 
// ### tap.done_testing
//     void tap.done_testing()
// 
// After you are done testing, before calling the next plan, state you are done
// testing.
// 
// ### tap.Harness
//     void tap.Harness()
// 
// This outputs a small summary of currently tests and failures. Don't depend on
// this output format.
// 