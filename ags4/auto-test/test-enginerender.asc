// Test EngineRender Module Script
int GetTestEngineRenderCount()
{
  return 49;
}

#define TEST_COLOR_1  0xFF4488AA
#define TEST_COLOR_2  0xFFAA8844
#define TEST_COLOR_3  0xFFEE8800
#define TEST_COLOR_4  0xFF0088EE

#define TEST_SPRITE1  5
#define TEST_SPRITE2  6

void _FillSprite(DynamicSprite *spr, int color)
{
  DrawingSurface *ds = spr.GetDrawingSurface();
  ds.Clear(color);
  ds.Release();
}

void _HideControls(GUI *parent)
{
  for (int i = 0; i < parent.ControlCount; i++) {
    parent.Controls[i].Visible = false;
  }
}

bool _MatchSurfaceRects(DrawingSurface *test_ds, DrawingSurface *match_ds, 
  int rx, int ry, int rw, int rh)
{
  for (int y = 0; y < rh; y++) {
    for (int x = 0; x < rw; x++) {
      if (test_ds.GetPixel(x + rx, y + ry) != match_ds.GetPixel(x, y)) {
        return false;
      }
    }
  }
  
  return true;
}

// Takes screenshot 1:1 and compares a part of the image with the given sprite
bool _TakeScreenshotAndCompareRect(int rx, int ry, int rw, int rh, DynamicSprite *match_with)
{
  DynamicSprite *shot = DynamicSprite.CreateFromScreenShot(Screen.Width, Screen.Height);
  DrawingSurface *test_ds = shot.GetDrawingSurface();
  DrawingSurface *match_ds = match_with.GetDrawingSurface();
  
  for (int y = 0; y < rh; y++) {
    for (int x = 0; x < rw; x++) {
      if (test_ds.GetPixel(x + rx, y + ry) != match_ds.GetPixel(x, y)) {
        return false;
      }
    }
  }
  
  return true;
}

bool _TakeScreenshotAndCompareRect2(int r1x, int r1y, int r1w, int r1h, DynamicSprite *match_with1, 
  int r2x, int r2y, int r2w, int r2h, DynamicSprite *match_with2)
{
  DynamicSprite *shot = DynamicSprite.CreateFromScreenShot(Screen.Width, Screen.Height);
  DrawingSurface *test_ds = shot.GetDrawingSurface();
  DrawingSurface *match_ds1 = match_with1.GetDrawingSurface();
  DrawingSurface *match_ds2 = match_with2.GetDrawingSurface();
  
  if (!_MatchSurfaceRects(test_ds, match_ds1, r1x, r1y, r1w, r1h)) {
    return false;
  }
  if (!_MatchSurfaceRects(test_ds, match_ds2, r2x, r2y, r2w, r2h)) {
    return false;
  }
  return true;
}

void _SetSpriteAndTest(Object *obj, int sprnum, DynamicSprite *dynspr, const string test_name)
{
  obj.Graphic = sprnum;
  if (dynspr == null) {
    dynspr = DynamicSprite.CreateFromExistingSprite(sprnum, true);
  }
  Wait(1); // let them redraw
  tap.ok(
    _TakeScreenshotAndCompareRect(obj.X, obj.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr),
    test_name);
}

void _SetSpriteAndTest2(Object *obj1, Object *obj2, int sprnum1, DynamicSprite *spr1, int sprnum2, DynamicSprite *spr2, const string test_name)
{
  obj1.Graphic = sprnum1;
  obj2.Graphic = sprnum2;
  if (spr1 == null) {
    spr1 = DynamicSprite.CreateFromExistingSprite(sprnum1, true);
  }
  if (spr2 == null) {
    spr2 = DynamicSprite.CreateFromExistingSprite(sprnum2, true);
  }
  Wait(1); // let them redraw
  tap.ok(
    _TakeScreenshotAndCompareRect2(obj1.X, obj1.Y - spr1.Height, spr1.Width, spr1.Height, spr1, 
      obj2.X, obj2.Y - spr2.Height, spr2.Width, spr2.Height, spr2),
    test_name);
}

void _TestObjectMatchSprite2(Object *obj1, Object *obj2, DynamicSprite *dynspr, const string test_name)
{
  Wait(1); // let them redraw
  tap.ok(
    _TakeScreenshotAndCompareRect2(obj1.X, obj1.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr, 
      obj2.X, obj2.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr),
    test_name);
}

void _UpdateSpriteAndTest(Object *obj, DynamicSprite *dynspr, int color, const string test_name)
{
  _FillSprite(dynspr, color);
  Wait(1);
  tap.ok(
    _TakeScreenshotAndCompareRect(obj.X, obj.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr), 
    test_name);
}

void _UpdateSpriteAndTest2(Object *obj1, Object *obj2, DynamicSprite *dynspr, int color, const string test_name)
{
  _FillSprite(dynspr, color);
  Wait(1); // let them redraw
  tap.ok(
    _TakeScreenshotAndCompareRect2(obj1.X, obj1.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr, 
      obj2.X, obj2.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr),
    test_name);
}

DynamicSprite *_RecreateSpriteAndTest(Object *obj, DynamicSprite *dynspr, int color, const string test_name)
{
  int width = dynspr.Width;
  int height = dynspr.Height;
  dynspr.Delete(); // recreate the sprite
  dynspr = DynamicSprite.Create(width, height);
  _FillSprite(dynspr, color);
  obj.Graphic = dynspr.Graphic;
  Wait(1); // let them redraw
  tap.ok(
    _TakeScreenshotAndCompareRect(obj.X, obj.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr), 
    test_name);
  return dynspr;
}

DynamicSprite *_RecreateSpriteAndTest2(Object *obj1, Object *obj2, DynamicSprite *dynspr, int color, const string test_name)
{
  int width = dynspr.Width;
  int height = dynspr.Height;
  dynspr.Delete(); // recreate the sprite
  dynspr = DynamicSprite.Create(width, height);
  _FillSprite(dynspr, color);
  obj1.Graphic = dynspr.Graphic;
  obj2.Graphic = dynspr.Graphic;
  Wait(1); // let them redraw
  tap.ok(
    _TakeScreenshotAndCompareRect2(obj1.X, obj1.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr, 
      obj2.X, obj2.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr),
    test_name);
  return dynspr;
}

void TestEngineRender()
{  
  tap.Comment("start EngineRender tests");
  tap.Comment(String.Format("System.HardwareAcceleration = %d", System.HardwareAcceleration));
  
  // Do not change GUI looks when disabled
  SetGameOption(OPT_WHENGUIDISABLED, 2);
  
  //
  // Object texture update after dynamic sprite change
  //
  {
    int color1 = TEST_COLOR_1;
    int color2 = TEST_COLOR_2;
    Object* oDynamicObject = object[0];
    DynamicSprite* dynspr = DynamicSprite.Create(10, 10);
    _FillSprite(dynspr, color1);
    oDynamicObject.Graphic = dynspr.Graphic;
    oDynamicObject.X = 100;
    oDynamicObject.Y = 100;
    oDynamicObject.Visible = true;
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(oDynamicObject.X, oDynamicObject.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr), 
      "DynamicSprite update 1-1 (room object) is matched");
    
    oDynamicObject.Visible = false; // stop its render pass for a moment
    _FillSprite(dynspr, color2); // change the sprite
    Wait(1); // one pass with object disabled
    oDynamicObject.Visible = true; // start render pass again
    Wait(1); // let it render
    tap.ok(
      _TakeScreenshotAndCompareRect(oDynamicObject.X, oDynamicObject.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr), 
      "DynamicSprite update 1-2 (room object) is matched");
    
    oDynamicObject.Visible = false;
    oDynamicObject.Graphic = 0;
    dynspr.Delete();
  }
  
  //
  // Object texture update after dynamic sprite recreated
  // with coincidentally the same sprite ID
  //
  {
    int color1 = TEST_COLOR_1;
    int color2 = TEST_COLOR_2;
    DynamicSprite* dynspr = DynamicSprite.Create(10, 10);
    Object* oDynamicObject = object[1];
    _FillSprite(dynspr, color1);
    oDynamicObject.Graphic = dynspr.Graphic;
    oDynamicObject.X = 100;
    oDynamicObject.Y = 100;
    oDynamicObject.Visible = true;
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(oDynamicObject.X, oDynamicObject.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr), 
      "DynamicSprite recreate 1-1 (room object) is matched");
    
    oDynamicObject.Visible = false; // stop its render pass for a moment
    dynspr.Delete(); // recreate the sprite
    dynspr = DynamicSprite.Create(10, 10);
    _FillSprite(dynspr, color2);
    Wait(1); // one pass with object disabled
    oDynamicObject.Graphic = dynspr.Graphic;
    oDynamicObject.Visible = true; // start render pass again
    Wait(1); // let it render
    tap.ok(
      _TakeScreenshotAndCompareRect(oDynamicObject.X, oDynamicObject.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr), 
      "DynamicSprite recreate 1-2 (room object) is matched");
    
    oDynamicObject.Visible = false;
    oDynamicObject.Graphic = 0;
    dynspr.Delete();
  }
  
  //
  // Overlay texture update after dynamic sprite change;
  // We test overlays separately, because they have slightly different
  // path of updating their textures in the engine. Also they are
  // dynamic objects themselves and may be deleted completely.
  //
  {
    int color1 = TEST_COLOR_1;
    int color2 = TEST_COLOR_2;
    DynamicSprite* dynspr = DynamicSprite.Create(10, 10);
    _FillSprite(dynspr, color1);
    Overlay* over = Overlay.CreateGraphical(100, 100, dynspr.Graphic);
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(over.X, over.Y, dynspr.Width, dynspr.Height, dynspr), 
      "DynamicSprite update 2-1 (overlay) is matched");
    
    over.Transparency = 100; // stop its render pass for a moment
    _FillSprite(dynspr, color2); // change the sprite
    Wait(1); // one pass with object disabled
    over.Transparency = 0; // start render pass again
    Wait(1); // let it render
    tap.ok(
      _TakeScreenshotAndCompareRect(over.X, over.Y, dynspr.Width, dynspr.Height, dynspr), 
      "DynamicSprite update 2-2 (overlay) is matched");
    
    over.Remove();
    dynspr.Delete();
  }
  
  //
  // Overlay texture update after dynamic sprite recreated
  // with coincidentally the same sprite ID
  //
  {
    int color1 = TEST_COLOR_1;
    int color2 = TEST_COLOR_2;
    DynamicSprite* dynspr = DynamicSprite.Create(10, 10);
    _FillSprite(dynspr, color1);
    Overlay* over = Overlay.CreateGraphical(100, 100, dynspr.Graphic);
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(over.X, over.Y, dynspr.Width, dynspr.Height, dynspr), 
      "DynamicSprite recreate 2-1 (overlay) is matched");
    
    over.Transparency = 100; // stop its render pass for a moment
    dynspr.Delete(); // recreate the sprite
    dynspr = DynamicSprite.Create(10, 10);
    _FillSprite(dynspr, color2);
    Wait(1); // one pass with object disabled
    over.Graphic = dynspr.Graphic;
    over.Transparency = 0; // start render pass again
    Wait(1); // let it render
    tap.ok(
      _TakeScreenshotAndCompareRect(over.X, over.Y, dynspr.Width, dynspr.Height, dynspr), 
      "DynamicSprite recreate 2-2 (overlay) is matched");
    
    over.Remove();
    dynspr.Delete();
  }
  
  //
  // GUI texture update after dynamic sprite change.
  //
  {
    int color1 = TEST_COLOR_1;
    int color2 = TEST_COLOR_2;
    DynamicSprite* dynspr = DynamicSprite.Create(10, 10, false);
    _FillSprite(dynspr, color1);
    gGui1.BackgroundGraphic = dynspr.Graphic;
    gGui1.X = 100;
    gGui1.Y = 100;
    gGui1.Width = dynspr.Width;
    gGui1.Height = dynspr.Height;
    gGui1.Visible = true;
    _HideControls(gGui1);
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(gGui1.X, gGui1.Y, gGui1.Width, gGui1.Height, dynspr), 
      "DynamicSprite update 3-1 (gui) is matched");
    
    _FillSprite(dynspr, color2);
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(gGui1.X, gGui1.Y, gGui1.Width, gGui1.Height, dynspr), 
      "DynamicSprite update 3-2 (gui) is matched");
    
    gGui1.BackgroundGraphic = 0;
    dynspr.Delete();
    
    //-------------------------------------------------------------------------
    
    dynspr = DynamicSprite.Create(10, 10, false);
    _FillSprite(dynspr, color1);
    Button1.NormalGraphic = dynspr.Graphic;
    Button1.Width = dynspr.Width;
    Button1.Height = dynspr.Height;
    Button1.Visible = true;
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(gGui1.X + Button1.X, gGui1.Y + Button1.Y, Button1.Width, Button1.Height, dynspr), 
      "DynamicSprite update 4-1 (gui button) is matched");
      
    _FillSprite(dynspr, color2);
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(gGui1.X + Button1.X, gGui1.Y + Button1.Y, Button1.Width, Button1.Height, dynspr), 
      "DynamicSprite update 4-2 (gui button) is matched");
    
    Button1.NormalGraphic = 0;
    Button1.Visible = false;
    gGui1.Visible = false;
    dynspr.Delete();
  }
  
  //
  // GUI texture update after dynamic sprite recreated
  //
  {
    int color1 = TEST_COLOR_1;
    int color2 = TEST_COLOR_2;
    DynamicSprite* dynspr = DynamicSprite.Create(10, 10, false);
    _FillSprite(dynspr, color1);
    gGui1.BackgroundGraphic = dynspr.Graphic;
    gGui1.X = 100;
    gGui1.Y = 100;
    gGui1.Width = dynspr.Width;
    gGui1.Height = dynspr.Height;
    gGui1.Visible = true;
    _HideControls(gGui1);
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(gGui1.X, gGui1.Y, gGui1.Width, gGui1.Height, dynspr), 
      "DynamicSprite recreate 3-1 (gui) is matched");
    
    dynspr.Delete();
    dynspr = DynamicSprite.Create(10, 10, false);
    _FillSprite(dynspr, color2);
    gGui1.BackgroundGraphic = dynspr.Graphic;
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(gGui1.X, gGui1.Y, gGui1.Width, gGui1.Height, dynspr), 
      "DynamicSprite recreate 3-2 (gui) is matched");
    
    gGui1.BackgroundGraphic = 0;
    dynspr.Delete();
    
    //-------------------------------------------------------------------------
    
    dynspr = DynamicSprite.Create(10, 10, false);
    _FillSprite(dynspr, color1);
    Button1.NormalGraphic = dynspr.Graphic;
    Button1.Width = dynspr.Width;
    Button1.Height = dynspr.Height;
    Button1.Visible = true;
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(gGui1.X + Button1.X, gGui1.Y + Button1.Y, Button1.Width, Button1.Height, dynspr), 
      "DynamicSprite recreate 4-1 (gui button) is matched");
    
    dynspr.Delete();
    dynspr = DynamicSprite.Create(10, 10, false);
    _FillSprite(dynspr, color2);
    Button1.NormalGraphic = dynspr.Graphic;
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(gGui1.X + Button1.X, gGui1.Y + Button1.Y, Button1.Width, Button1.Height, dynspr), 
      "DynamicSprite recreate 4-2 (gui button) is matched");
    
    Button1.NormalGraphic = 0;
    Button1.Visible = false;
    gGui1.Visible = false;
    dynspr.Delete();
  }
  
  //
  // Object View Frame update after dynamic sprite change
  //
  {
    int color1 = TEST_COLOR_1;
    int color2 = TEST_COLOR_2;
    Object* oDynamicObject = object[0];
    DynamicSprite* dynspr = DynamicSprite.Create(10, 10);
    _FillSprite(dynspr, color1);
    ViewFrame *vf = Game.GetViewFrame(VDYNAMIC, 0, 0);
    vf.Graphic = dynspr.Graphic;
    oDynamicObject.SetView(VDYNAMIC);
    oDynamicObject.X = 200;
    oDynamicObject.Y = 100;
    oDynamicObject.Visible = true;
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(oDynamicObject.X, oDynamicObject.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr), 
      "DynamicSprite update 5-1 (room object view frame) is matched");
    
    oDynamicObject.Visible = false; // stop its render pass for a moment
    _FillSprite(dynspr, color2); // change the sprite
    Wait(1); // one pass with object disabled
    oDynamicObject.Visible = true; // start render pass again
    Wait(1); // let it render
    tap.ok(
      _TakeScreenshotAndCompareRect(oDynamicObject.X, oDynamicObject.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr), 
      "DynamicSprite update 5-2 (room object view frame) is matched");
    
    oDynamicObject.Visible = false;
    oDynamicObject.Graphic = 0;
    dynspr.Delete();
  }
  
  //
  // Object View Frame update after dynamic sprite recreated
  // with coincidentally the same sprite ID
  //
  {
    int color1 = TEST_COLOR_1;
    int color2 = TEST_COLOR_2;
    DynamicSprite* dynspr = DynamicSprite.Create(10, 10);
    Object* oDynamicObject = object[1];
    _FillSprite(dynspr, color1);
    ViewFrame *vf = Game.GetViewFrame(VDYNAMIC, 0, 0);
    vf.Graphic = dynspr.Graphic;
    oDynamicObject.SetView(VDYNAMIC);
    oDynamicObject.X = 200;
    oDynamicObject.Y = 100;
    oDynamicObject.Visible = true;
    Wait(1);
    tap.ok(
      _TakeScreenshotAndCompareRect(oDynamicObject.X, oDynamicObject.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr), 
      "DynamicSprite recreate 5-1 (room object view frame) is matched");
    
    oDynamicObject.Visible = false; // stop its render pass for a moment
    dynspr.Delete(); // recreate the sprite
    dynspr = DynamicSprite.Create(10, 10);
    _FillSprite(dynspr, color2);
    Wait(1); // one pass with object disabled
    vf = Game.GetViewFrame(VDYNAMIC, 0, 0);
    vf.Graphic = dynspr.Graphic;
    oDynamicObject.Visible = true; // start render pass again
    Wait(1); // let it render
    tap.ok(
      _TakeScreenshotAndCompareRect(oDynamicObject.X, oDynamicObject.Y - dynspr.Height, dynspr.Width, dynspr.Height, dynspr), 
      "DynamicSprite recreate 5-2 (room object view frame) is matched");
    
    oDynamicObject.Visible = false;
    oDynamicObject.Graphic = 0;
    dynspr.Delete();
  }
  
  //
  // Object switching from static to dynamic sprite and back:
  // should keep updating itself after any change or if dynamic sprite changed
  // while it was assigned to object. This test is for sprite update
  // notification mechanism keeping working seamlessly while switching between
  // sprites of two kinds.
  //
  {
    int static_spr1 = TEST_SPRITE1;
    int static_spr2 = TEST_SPRITE2;
    int spr_width = Game.SpriteWidth[static_spr1];
    int spr_height = Game.SpriteHeight[static_spr1];
    int color1 = TEST_COLOR_1;
    int color2 = TEST_COLOR_2;
    int color3 = TEST_COLOR_3;
    DynamicSprite* dynspr1 = DynamicSprite.Create(spr_width, spr_height);
    _FillSprite(dynspr1, color1);
    DynamicSprite* dynspr2 = DynamicSprite.Create(spr_width, spr_height);
    _FillSprite(dynspr2, color2);
    
    Object* oDynamicObject = object[0];
    oDynamicObject.X = 100;
    oDynamicObject.Y = 100;
    oDynamicObject.Visible = true;
    
    _SetSpriteAndTest(oDynamicObject, static_spr1, null, "Object graphic sequence 1");
    _SetSpriteAndTest(oDynamicObject, dynspr1.Graphic, dynspr1, "Object graphic sequence 2");
    _SetSpriteAndTest(oDynamicObject, static_spr1, null, "Object graphic sequence 3");
    _SetSpriteAndTest(oDynamicObject, static_spr2, null, "Object graphic sequence 4");
    _SetSpriteAndTest(oDynamicObject, dynspr1.Graphic, dynspr1, "Object graphic sequence 5");
    _SetSpriteAndTest(oDynamicObject, dynspr2.Graphic, dynspr2, "Object graphic sequence 6");
    _SetSpriteAndTest(oDynamicObject, static_spr1, null, "Object graphic sequence 7");
    _SetSpriteAndTest(oDynamicObject, dynspr1.Graphic, dynspr1, "Object graphic sequence 8");
    _UpdateSpriteAndTest(oDynamicObject, dynspr1, color2, "Object graphic sequence 9");
    _UpdateSpriteAndTest(oDynamicObject, dynspr1, color3, "Object graphic sequence 10");
    _SetSpriteAndTest(oDynamicObject, static_spr1, null, "Object graphic sequence 11");
    _SetSpriteAndTest(oDynamicObject, dynspr1.Graphic, dynspr1, "Object graphic sequence 12");
    dynspr1 = _RecreateSpriteAndTest(oDynamicObject, dynspr1, color1, "Object graphic sequence 13");
    dynspr1 = _RecreateSpriteAndTest(oDynamicObject, dynspr1, color2, "Object graphic sequence 14");
    _SetSpriteAndTest(oDynamicObject, static_spr1, null, "Object graphic sequence 15");
    
    oDynamicObject.Visible = false;
  }
  
  //
  // Two objects updated in parallel.
  // Test multiple objects sharing same static or dynamic sprites
  // and being able to update in sync.
  //
  {
    int static_spr1 = TEST_SPRITE1;
    int static_spr2 = TEST_SPRITE2;
    int spr_width = Game.SpriteWidth[static_spr1];
    int spr_height = Game.SpriteHeight[static_spr1];
    int color1 = TEST_COLOR_1;
    int color2 = TEST_COLOR_2;
    int color3 = TEST_COLOR_3;
    int color4 = TEST_COLOR_4;
    DynamicSprite* dynspr1 = DynamicSprite.Create(spr_width, spr_height);
    _FillSprite(dynspr1, color1);
    DynamicSprite* dynspr2 = DynamicSprite.Create(spr_width, spr_height);
    _FillSprite(dynspr2, color2);
    
    Object* oDynamicObject1 = object[0];
    Object* oDynamicObject2 = object[1];
    oDynamicObject1.X = 100;
    oDynamicObject1.Y = 100;
    oDynamicObject1.Visible = true;
    oDynamicObject2.X = 200;
    oDynamicObject2.Y = 100;
    oDynamicObject2.Visible = true;
    
    _SetSpriteAndTest2(oDynamicObject1, oDynamicObject2, static_spr1, null, static_spr1, null, "Two objects graphic sequence 1");
    _SetSpriteAndTest2(oDynamicObject1, oDynamicObject2, dynspr1.Graphic, dynspr1, dynspr1.Graphic, dynspr1, "Two objects graphic sequence 2");
    _UpdateSpriteAndTest2(oDynamicObject1, oDynamicObject2, dynspr1, color2, "Two objects graphic sequence 3");
    oDynamicObject2.Visible = false; // do one pass with 1 object disabled
    _UpdateSpriteAndTest(oDynamicObject1, dynspr1, color3, "Two objects graphic sequence 4");
    oDynamicObject2.Visible = true; // enable and make a pass, make sure it syncs again
    _TestObjectMatchSprite2(oDynamicObject1, oDynamicObject2, dynspr1, "Two objects graphic sequence 5");
    dynspr1 = _RecreateSpriteAndTest2(oDynamicObject1, oDynamicObject2, dynspr1, color1, "Two objects graphic sequence 6");
    oDynamicObject2.Visible = false; // do one pass with 1 object disabled
    dynspr1 = _RecreateSpriteAndTest(oDynamicObject1, dynspr1, color2, "Two objects graphic sequence 7");
    oDynamicObject2.Visible = true; // enable and make a pass, make sure it syncs again
    _TestObjectMatchSprite2(oDynamicObject1, oDynamicObject2, dynspr1, "Two objects graphic sequence 8");
    // Now test some quick sequence where they change to different sprites
    _SetSpriteAndTest2(oDynamicObject1, oDynamicObject2, static_spr1, null, static_spr2, null, "Two objects graphic sequence 9");
    _SetSpriteAndTest2(oDynamicObject1, oDynamicObject2, dynspr1.Graphic, dynspr1, static_spr2, null, "Two objects graphic sequence 10");
    _SetSpriteAndTest2(oDynamicObject1, oDynamicObject2, dynspr1.Graphic, dynspr1, dynspr1.Graphic, dynspr1, "Two objects graphic sequence 11");
    _SetSpriteAndTest2(oDynamicObject1, oDynamicObject2, dynspr2.Graphic, dynspr2, dynspr1.Graphic, dynspr1, "Two objects graphic sequence 12");
    _SetSpriteAndTest2(oDynamicObject1, oDynamicObject2, dynspr2.Graphic, dynspr2, dynspr2.Graphic, dynspr2, "Two objects graphic sequence 13");
    _SetSpriteAndTest2(oDynamicObject1, oDynamicObject2, static_spr1, null, static_spr2, null, "Two objects graphic sequence 14");
  }
  
  tap.Comment("end EngineRender tests");
}
